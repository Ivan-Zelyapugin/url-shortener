#pragma once
#include <unordered_map>
#include <string>
#include <mutex>
#include "database_connection.h"
#include "config.h"

/**
 * @class Storage
 * @brief Класс для хранения и сокращения URL.
 * 
 * Этот класс реализует паттерн "Одиночка" и предоставляет функционал для сокращения
 * длинных URL и получения оригинальных URL по коротким. Хранение данных происходит
 * в базе данных PostgreSQL.
 */
class Storage {
public:
    /**
     * @brief Получение экземпляра класса Storage (Одиночка).
     * 
     * Этот метод реализует паттерн "Одиночка" и предоставляет доступ к единственному
     * экземпляру класса Storage. Экземпляр класса создается с использованием объекта
     * конфигурации.
     * 
     * @param config Конфигурация, которая используется для инициализации базы данных.
     * @return Ссылку на единственный экземпляр объекта Storage.
     */
    static Storage& get_instance(const Config& config);

    /**
     * @brief Метод для сокращения длинного URL.
     * 
     * Этот метод принимает длинный URL и возвращает его короткую версию.
     * Если короткий путь не передан, генерируется уникальный короткий URL.
     * 
     * @param long_url Длинный URL, который нужно сократить.
     * @param short_path Опциональный параметр, который задает конкретный короткий путь.
     * @return Сокращенная версия URL.
     */
    std::string shorten_url(const std::string& long_url, const std::string& short_path = "");

    /**
     * @brief Метод для получения оригинального URL по короткому URL.
     * 
     * Этот метод принимает короткий URL и возвращает оригинальный длинный URL, связанный
     * с данным коротким путем.
     * 
     * @param short_url Короткий URL, для которого нужно получить оригинальный URL.
     * @return Оригинальный длинный URL.
     */
    std::string get_original_url(const std::string& short_url);

private:
    /**
     * @brief Конструктор для инициализации экземпляра класса Storage.
     * 
     * Конструктор принимает объект конфигурации, который используется для настройки
     * подключения к базе данных.
     * 
     * @param config Конфигурация для инициализации базы данных.
     */
    explicit Storage(const Config& config);

    /**
     * @brief Метод для сохранения данных о коротком и длинном URL в базе данных.
     * 
     * Этот метод сохраняет пару короткий URL / длинный URL в базе данных PostgreSQL.
     * 
     * @param short_url Короткий URL, который нужно сохранить.
     * @param long_url Оригинальный длинный URL.
     */
    void save_to_db(const std::string& short_url, const std::string& long_url);

    /**
     * @brief Метод для генерации хеш-кода из строки.
     * 
     * Этот метод генерирует простой хеш-код для строки, который используется для создания
     * короткого URL. Это хеширование позволяет быстро генерировать уникальные короткие URL.
     * 
     * @param str Строка, для которой нужно создать хеш.
     * @return Хеш-код строки.
     */
    unsigned long simple_hash(const std::string& str);

    /**
     * @brief Мьютекс для синхронизации доступа к данным.
     * 
     * Этот объект типа `mutex` используется для обеспечения потокобезопасности при
     * доступе к данным, которые могут быть изменены несколькими потоками.
     */
    std::mutex mutex_;

    /**
     * @brief Экземпляр для работы с базой данных.
     * 
     * Этот объект класса `DatabaseConnection` используется для выполнения операций
     * с базой данных PostgreSQL, таких как сохранение и извлечение URL.
     */
    DatabaseConnection db_connection_;  
};
