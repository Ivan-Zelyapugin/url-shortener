#pragma once
#include <boost/asio.hpp>
#include <boost/beast.hpp>
#include "config.h"

namespace beast = boost::beast;
namespace http = beast::http;

/**
 * @class Server
 * @brief Класс для реализации HTTP-сервера с использованием библиотеки Boost.Asio и Boost.Beast.
 * 
 * Этот класс создает сервер, который принимает HTTP-запросы, обрабатывает их, 
 * генерирует ответы в формате JSON и отправляет их обратно клиенту. Сетевой стек
 * работает с использованием библиотеки Boost.Asio, а для HTTP используется Boost.Beast.
 */
class Server {
public:
    /**
     * @brief Конструктор, инициализирующий сервер с заданными параметрами.
     * 
     * Этот конструктор инициализирует объект сервера с адресом, портом и конфигурацией.
     * Он создает необходимые объекты для работы с асинхронным вводом/выводом и сетевыми соединениями.
     * 
     * @param address Адрес, на котором сервер будет слушать входящие соединения.
     * @param port Порт, на котором сервер будет принимать подключения.
     * @param config Конфигурация сервера, передается через объект `Config`.
     */
    Server(const std::string& address, int port, const Config& config);

    /**
     * @brief Запуск сервера.
     * 
     * Этот метод начинает работу сервера, активируя процесс асинхронной обработки запросов.
     */
    void run();

private:
    /**
     * @brief Метод для ожидания новых входящих соединений.
     * 
     * Этот метод асинхронно ожидает входящих подключений и вызывает обработчик
     * для каждого нового соединения.
     */
    void do_accept();

    /**
     * @brief Метод для обработки HTTP-запроса.
     * 
     * Этот метод отвечает за получение данных из сокета и обработку HTTP-запроса,
     * а затем формирует соответствующий ответ и отправляет его обратно клиенту.
     * 
     * @param socket Сокет, через который приходит запрос от клиента.
     */
    void handle_request(std::shared_ptr<boost::asio::ip::tcp::socket> socket);

    /**
     * @brief Метод для создания JSON-ответа.
     * 
     * Этот метод генерирует строку JSON-ответа с указанным статусом, ключом и значением.
     * 
     * @param status Статус ответа (например, "success" или "error").
     * @param key Ключ в JSON-ответе.
     * @param value Значение, связанное с ключом.
     * @return Строка JSON-формата, представляющая ответ.
     */
    std::string make_json_response(const std::string& status, const std::string& key, const std::string& value);

    /**
     * @brief Метод для создания JSON-ответа об ошибке.
     * 
     * Этот метод генерирует строку JSON, представляющую ошибку с переданным сообщением.
     * 
     * @param message Сообщение об ошибке.
     * @return Строка JSON-формата, представляющая ошибку.
     */
    std::string make_json_error(const std::string& message);

    /**
     * @brief Извлечение значения из JSON-строки по ключу.
     * 
     * Этот метод извлекает значение из переданной строки JSON по указанному ключу.
     * 
     * @param json Строка в формате JSON.
     * @param key Ключ, по которому нужно извлечь значение.
     * @return Значение, соответствующее ключу в JSON-строке.
     */
    std::string extract_json_value(const std::string& json, const std::string& key);

    /**
     * @brief Приватная переменная для асинхронного ввода/вывода.
     * 
     * Этот объект типа `boost::asio::io_context` используется для управления
     * асинхронными операциями ввода/вывода на сервере.
     * 
     * @note Он необходим для выполнения всех асинхронных операций, таких как прием соединений,
     *       обработка запросов и отправка ответов.
     */
    boost::asio::io_context io_context_;

    /**
     * @brief Приватная переменная для принятия входящих соединений.
     * 
     * Этот объект типа `boost::asio::ip::tcp::acceptor` используется для ожидания
     * входящих соединений от клиентов и их принятия.
     * 
     * @note Он работает в тесной связи с объектом `io_context_`, выполняя асинхронный
     *       прием подключений.
     */
    boost::asio::ip::tcp::acceptor acceptor_;

    /**
     * @brief Приватная переменная для хранения конфигурации сервера.
     * 
     * Этот объект класса `Config` хранит параметры конфигурации для работы
     * сервера, такие как параметры подключения и другие.
     * 
     */
    Config config_;
};
